#include <inttypes.h>

#include "console.hpp"
#include "pmm.hpp"
#include "numeric.hpp"
#include "pointer.hpp"
#include "multiboot.hpp"
#include "gdt.hpp"
#include "idt.hpp"
#include "compat.h"
#include "io.hpp"

using namespace multiboot;
using namespace console_tools;

struct dummy;

// Symbols generated by linker, no useful content in there...
extern dummy kernelStartMarker;
extern dummy kernelEndMarker;

extern "C" void init(Structure const & data)
{
	Console::main
		<< "Hello World!\n"
		<< FColor(Color::Yellow) << "Hello color!" << FColor() << "\n"
		<< BColor(Color::Blue) << "Hello blue!" << BColor() << "\n"
		<< "Hello default color.\n";
  
	GDT::initialize();
	
  Console::main
    << "bootloader name:  " << data.bootLoaderName << "\n"
    << "command line:     " << data.commandline << "\n"
    << "count of modules: " << data.modules.length << "\n"
    << "count of mmaps:   " << data.memoryMaps.length << "\n";
  for(auto &mmap : data.memoryMaps) {
    if(mmap.length == 0) {
      continue;
    }
    if(mmap.isFree() == false) {
      continue;
    }
    Console::main
      << "mmap: "
      << "start: " << hex(mmap.base) << ", length: " << hex(mmap.length)
      << ", " << mmap.entry_size
      << ", " << sizeof(mmap)
      << "\n";
    if(mmap.base > 0xFFFFFFFF) {
        Console::main << "mmap out of 4 gigabyte range." << "\n";
        continue;
    }    
    if(mmap.isFree()) {
      // Mark all free memory free...
      physical_t lower = physical_t(mmap.base).alignUpper(4096);
      physical_t upper = physical_t(mmap.base + mmap.length).alignLower(4096);
      
      uint32_t ptr = lower.numeric();
      while (ptr < upper.numeric()) {
        PMM::markFree(physical_t(ptr));
        ptr += 0x1000;
      }
    }
  }
  
  // Mark all memory used by the kernel used...
  physical_t lower = physical_t(&kernelStartMarker).alignLower(4096);
  physical_t upper = physical_t(&kernelEndMarker).alignUpper(4096);
  
  uint32_t ptr = lower.numeric();
  while (ptr < upper.numeric()) {
    PMM::markUsed(physical_t(ptr));
    ptr += 0x1000;
  }
  
  auto freeMemory = PMM::getFreeMemory();
  Console::main
    << "Free: "
    << (freeMemory >> 20) << "MB, "
    << (freeMemory >> 10) << "KB, "
    << (freeMemory >>  0) << "B, "
    << (freeMemory >> 12) << "Pages\n";

	IDT::initialize();

	Console::main << "Interrupts set up.\n";
	
	asm volatile("sti");
	
	Console::main << "Interrupts enabled.\n";
	
  /*
  for(int i = 0; i < 10; i++) {
    bool success;
    physical_t page = PMM::alloc(success);
    Console::main << "allocated page " << i << " [" << success << "]: " << page << "\n";
  }
  */
	
	asm volatile("int $0x1");
  
  while(true);
}

static_assert(sizeof(void*) == 4, "Target platform is not 32 bit.");